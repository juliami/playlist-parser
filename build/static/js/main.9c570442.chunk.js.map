{"version":3,"sources":["components/PlaylistConverter/cleanupPlaylist.js","components/PlaylistConverter/albums.js","components/PlaylistConverter/index.js","App.js","serviceWorker.js","index.js"],"names":["regex","cleanupPlaylist","rawPlaylist","splitArray","split","processedString","forEach","val","i","counter","suffix","length","replace","extractAlbumNames","lines","uniqueAlbums","Set","line","match","inside","trim","add","Array","from","fetchAlbumCovers","albumNames","a","async","isArray","controller","AbortController","timeoutId","setTimeout","abort","requests","map","albumName","url","encodeURIComponent","fetch","signal","response","ok","Error","json","data","result","results","collectionId","collectionName","artistName","artworkUrl100","artworkUrl600","viewUrl","collectionViewUrl","Promise","all","entries","reduce","acc","key","value","clearTimeout","useStyles","createUseStyles","textarea","border","borderRadius","boxSizing","resize","fontSize","width","maxWidth","height","margin","top","right","bottom","left","padding","outline","button","backgroundImage","display","color","cursor","coversGrid","marginTop","gridTemplateColumns","gridGap","coverItem","flexDirection","alignItems","textAlign","coverImage","boxShadow","coverCaption","PlaylistConverter","props","useState","setValue","rawValue","setRawValue","setAlbumNames","coversMap","setCoversMap","loading","setLoading","error","setError","classes","onChange","e","target","className","onClick","event","preventDefault","extracted","fetched","handleChange","name","cover","href","rel","alt","src","container","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c570442.chunk.js","sourcesContent":["\nvar regex = /\\[.*?\\] /g;\n\nexport const cleanupPlaylist = rawPlaylist => {\n    const splitArray = rawPlaylist.split(/\\r?\\n/);\n    let processedString = '';\n    splitArray.forEach((val, i) => {\n        const counter = i + 1;\n        const suffix = counter < splitArray.length ? '\\n' : '';\n        return processedString += counter + '. ' + val + suffix;\n    })\n    return processedString.replace(regex, \"\");\n};\n\n","// Utilities to extract album names from raw playlist text and fetch their covers\n\n/**\n * Extract unique album names from raw playlist text.\n * Expected line format example:\n *   Artist - [Album Name #03] Track Title\n * We take the content inside the first [...] on each line.\n */\nexport const extractAlbumNames = (rawPlaylist) => {\n    if (!rawPlaylist || typeof rawPlaylist !== 'string') {\n        return [];\n    }\n    const lines = rawPlaylist.split(/\\r?\\n/);\n    const uniqueAlbums = new Set();\n    lines.forEach((line) => {\n        const match = line.match(/\\[(.*?)\\]/);\n        if (match && match[1]) {\n            // Use the text before a potential track marker like #03\n            const inside = match[1].split('#')[0].trim();\n            if (inside) {\n                uniqueAlbums.add(inside);\n            }\n        }\n    });\n    return Array.from(uniqueAlbums);\n};\n\n/**\n * Fetch album cover art using the iTunes Search API.\n * Returns a map of albumName -> artwork object.\n */\nexport const fetchAlbumCovers = async (albumNames) => {\n    if (!Array.isArray(albumNames) || albumNames.length === 0) {\n        return {};\n    }\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n    try {\n        const requests = albumNames.map(async (albumName) => {\n            const url = `https://itunes.apple.com/search?term=${encodeURIComponent(albumName)}&entity=album&limit=1`;\n            const response = await fetch(url, { signal: controller.signal });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch album: ${albumName}`);\n            }\n            const data = await response.json();\n            const result = (data && Array.isArray(data.results) && data.results[0]) || null;\n            if (!result) {\n                return [albumName, null];\n            }\n            return [albumName, {\n                collectionId: result.collectionId,\n                collectionName: result.collectionName,\n                artistName: result.artistName,\n                artworkUrl100: result.artworkUrl100,\n                artworkUrl600: result.artworkUrl100 ? result.artworkUrl100.replace('100x100bb', '600x600bb') : null,\n                viewUrl: result.collectionViewUrl\n            }];\n        });\n\n        const entries = await Promise.all(requests);\n        return entries.reduce((acc, [key, value]) => {\n            acc[key] = value;\n            return acc;\n        }, {});\n    } finally {\n        clearTimeout(timeoutId);\n    }\n};\n\n\n","import React, { useState } from 'react';\nimport { cleanupPlaylist } from './cleanupPlaylist';\nimport { extractAlbumNames, fetchAlbumCovers } from './albums';\nimport { createUseStyles } from 'react-jss'\n\nconst useStyles = createUseStyles({\n    textarea: {\n        border: '1px solid #3A6073',\n        borderRadius: '4px',\n        boxSizing: 'border-box',\n        resize: 'none',\n        fontSize: '18px',\n        width: '100%',\n        maxWidth: '600px',\n        height: '500px',\n        margin: {\n            top: 'auto',\n            right: 0,\n            bottom: 0,\n            left: 'auto'\n        },\n        padding: '30px',\n        '&:focus': {\n            border: '1px solid #84a2b1',\n            outline: 'none'\n        }\n    },\n    button: {\n        backgroundImage: 'linear-gradient(to right, #16222A 0%, #3A6073 51%, #16222A 100%)',\n        borderRadius: '4px',\n        display: 'block',\n        width: '100%',\n        color: '#fff',\n        cursor: 'pointer',\n        fontSize: '20px',\n        height: '50px',\n        '&:hover': {\n            backgroundImage: 'linear-gradient(to right, #16222A 0%, #498daf 51%, #16222A 100%)',\n\n        }\n    },\n    coversGrid: {\n        marginTop: '20px',\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))',\n        gridGap: '12px'\n    },\n    coverItem: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        textAlign: 'center'\n    },\n    coverImage: {\n        width: '100%',\n        maxWidth: '120px',\n        borderRadius: '4px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.15)'\n    },\n    coverCaption: {\n        marginTop: '6px',\n        fontSize: '12px'\n    },\n})\n\nconst PlaylistConverter = (props) => {\n    const [value, setValue] = useState('');\n    const [rawValue, setRawValue] = useState('');\n    const [albumNames, setAlbumNames] = useState([]);\n    const [coversMap, setCoversMap] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const handleChange = async event => {\n        event.preventDefault();\n        setError(null);\n        const extracted = extractAlbumNames(rawValue);\n        setAlbumNames(extracted);\n        if (extracted.length > 0) {\n            try {\n                setLoading(true);\n                const fetched = await fetchAlbumCovers(extracted);\n                setCoversMap(fetched);\n            } catch (e) {\n                setError('Failed to fetch album covers.');\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setCoversMap({});\n        }\n        setValue(cleanupPlaylist(rawValue))\n    };\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <textarea onChange={e => { setRawValue(e.target.value); setValue(e.target.value); }} className={classes.textarea} value={value}/>\n            <button onClick={e => handleChange(e)} className={classes.button}>Go!</button>\n            {loading && (<div className={classes.coversGrid}>Loading covers...</div>)}\n            {error && (<div className={classes.coversGrid}>{error}</div>)}\n            {!loading && !error && albumNames && albumNames.length > 0 && (\n                <div className={classes.coversGrid}>\n                    {albumNames.map((name) => {\n                        const cover = coversMap[name];\n                        if (!cover || !cover.artworkUrl600) {\n                            return null;\n                        }\n                        return (\n                            <div key={name} className={classes.coverItem}>\n                                <a href={cover.viewUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    <img alt={name} src={cover.artworkUrl600} className={classes.coverImage} />\n                                </a>\n                                <div className={classes.coverCaption}>{name}</div>\n                            </div>\n                        );\n                    })}\n                </div>\n            )}\n        </>\n);\n}\n\nexport default PlaylistConverter;\n","import React from 'react';\nimport { createUseStyles } from 'react-jss'\n\nimport PlaylistConverter from './components/PlaylistConverter';\n\nconst useStyles = createUseStyles({\n  container: {\n    width: '100%',\n    maxWidth: '600px',\n    margin: '0 auto'\n  },\n})\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n     <PlaylistConverter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}